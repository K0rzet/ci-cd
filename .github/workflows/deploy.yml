name: Deploy NestJS Application

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  contents: write

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: meme-factory
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password123
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Create .env file
        run: |
          echo 'APP_URL="${{ secrets.APP_URL }}"' > .env
          echo 'BOT_TOKEN="${{ secrets.BOT_TOKEN }}"' >> .env
          echo 'DATABASE_URL="${{ secrets.DATABASE_URL }}"' >> .env
          echo 'JWT_SECRET="${{ secrets.JWT_SECRET }}"' >> .env
          cat .env

      - name: Run Prisma migrations
        run: npx prisma migrate dev --preview-feature

      - name: Push Prisma schema to database
        run: npx prisma db push

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build project
        run: yarn run build
        
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
          APP_URL: ${{ secrets.APP_URL }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST "cd $SERVER_PATH && cat .env && echo "APP_URL=$APP_URL" > .env && echo "BOT_TOKEN=$BOT_TOKEN" >> .env && echo "DATABASE_URL=$DATABASE_URL" >> .env && echo "JWT_SECRET=$JWT_SECRET" >> .env && git reset --hard origin/main && git pull origin main && yarn install && yarn run build && pm2 restart all"
